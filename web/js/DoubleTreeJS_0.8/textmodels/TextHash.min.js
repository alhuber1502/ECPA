/* (This is the new BSD license.)
* Copyright (c) 2012-2014, Chris Culy
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Chris Culy nor the 
*		names of its contributors may be used to endorse or promote 
*		products from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Chris Culy
* ``AS IS'' AND ANY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
* ARE DISCLAIMED. IN NO EVENT SHALL Chris Culy
* BE LIABLE FOR ANY, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
* CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
* GOODS OR SERVICES; OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
* TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/"use strict";

var textmodel = textmodel || {};

(function() {
textmodel.TextHash = function(e, t, n, r, i, s, o) {
function v(e) {
var s = e.split(r);
var o = s[u.baseFieldIdx];
if (!t) {
o = o.toLocaleLowerCase();
}
for (var a = 0, f = s.length; a < f; a++) {
if (a == u.baseFieldIdx) {
continue;
}
if (i.indexOf(n[a]) > -1) {
o += "" + r + s[a];
}
}
return o;
}
function m(e, t) {
var i = e.split(r);
var s = {};
i.forEach(function(e, t) {
s[n[t]] = e;
});
s[a] = t;
return s;
}
var u = this;
var a = "id" + r;
var f = String.fromCharCode(30);
this.useRecords = o && true;
this.baseField = s;
this.baseFieldIdx = n.indexOf(s);
if (this.baseFieldIdx == -1) {
this.baseFieldIdx = 0;
}
if (this.useRecords) {
e = e.replace(/\s*\n\n+/g, " " + f + " ");
}
this.items = e.replace(/\s*\n\s*/g, " ").trim().split(" ");
this.itemObjs = [];
this.indices = {};
this.numTypes = 0;
this.numTokens = this.items.length;
var l = this.items.length;
var c = l - 1;
if (e != "") {
for (var h = 0; h < l; h++) {
var p = v(this.items[h]);
this.itemObjs[h] = m(p, h);
if (!(p in this.indices && this.indices[p] instanceof Array)) {
this.indices[p] = [];
}
try {
this.indices[p].push(h);
} catch (d) {
console.log("Couldn't add: " + p);
}
}
}
this.numTypes = Object.keys(this.indices).length;
this.containsItem = function(e) {
return v(e) in this.indices;
};
this.containsIndex = function(e) {
return e in this.indices;
};
this.getItem = function(e, t, r, i, s, o, l) {
var c = [], h = [], p = [], d = [];
if (u.useRecords) {
var v = n[0];
if (s == null) {
s = {};
}
if (typeof s["leftEnd"] === "undefined") {
s["leftEnd"] = {};
}
var m = s["leftEnd"][v];
if (typeof s["leftEnd"][v] === "undefined") {
s["leftEnd"][v] = [];
}
s["leftEnd"][v].push(f);
if (typeof s["rtEnd"] === "undefined") {
s["rtEnd"] = {};
}
if (typeof s["rtEnd"][v] === "undefined") {
s["rtEnd"][v] = [];
}
s["rtEnd"][v].push(f);
}
var g = function(e) {
if (!l) {
return function() {
return true;
};
}
var t = new RegExp("^[" + l + "]$");
return function(n, r, i) {
return !t.test(u.itemObjs[r + e][u.baseField]);
};
};
var y = function(e) {
return function() {
return true;
};
};
var b = function(e) {
return e;
};
var w = function(e) {
return e;
};
if (s) {
if (s["include"]) {
var E = s["include"];
var y = function(e) {
return function(t, n, r) {
for (var i in E) {
if (E[i].indexOf(u.itemObjs[n + e][i]) > -1) {
return true;
}
}
return false;
};
};
} else if (s["exclude"]) {
var S = s["exclude"];
y = function(e) {
return function(t, n, r) {
for (var i in S) {
if (S[i].indexOf(u.itemObjs[n + e][i]) > -1) {
return false;
}
}
return true;
};
};
}
if (s["leftEnd"]) {
b = function(e, t) {
var n = 0;
var r = true;
for (var i = e.length - 1; i > -1; i--) {
for (var o in s["leftEnd"]) {
if (s["leftEnd"][o].indexOf(u.itemObjs[i + t][o]) > -1) {
r = false;
}
}
if (!r) {
n = i + 1;
break;
}
}
return e.slice(n, e.length + 1);
};
}
if (s["rtEnd"]) {
w = function(e, t) {
var n = true;
return e.filter(function(e, r) {
if (!n) {
return false;
}
for (var i in s["rtEnd"]) {
if (s["rtEnd"][i].indexOf(u.itemObjs[r + t][i]) > -1) {
n = false;
break;
}
}
return n;
});
};
}
}
var x = this.items.length;
var T = x - 1;
var N;
if (i) {
var C = this;
var k = new RegExp(e, "i");
var L = Object.keys(this.indices).filter(function(e) {
return k.test(e);
}).map(function(e) {
return C.indices[e];
});
N = [];
L.forEach(function(e) {
e.forEach(function(e) {
N.push(e);
});
});
C = null;
} else {
N = this.indices[e];
}
var A = N.length;
var O = A - 1;
for (var M = 0; M < A; M++) {
var _ = N[M];
var D = this.items[_];
var P = this.itemObjs[_][a];
if (r != null && !(P in r)) {
continue;
}
h.push(D);
d.push(P);
if (_ == 0) {
c.push([]);
} else {
var H = Math.max(0, _ - t);
var B = b(this.items.slice(H, _), H);
H += t - B.length;
c.push(B.filter(function(e, t, n) {
return g(H)(e, t, n) && y(H)(e, t, n);
}));
}
if (_ == T) {
p.push([]);
} else {
var j = Math.min(T, _ + t);
var F = _ + 1;
var I = w(this.items.slice(F, j + 1), F);
p.push(I.filter(function(e, t, n) {
return g(F)(e, t, n) && y(F)(e, t, n);
}));
}
}
if (o !== null && o > 0) {
var q = d3.shuffle(d3.range(0, h.length)).slice(0, o);
c = d3.permute(c, q);
h = d3.permute(h, q);
p = d3.permute(p, q);
d = d3.permute(d, q);
}
return [ c, h, p, d ];
};
this.getItems = function(e, t, n, r, i, s) {
return this.getItem(e, t, n, true, r, i, s);
};
this.getItemContext = function(e, t, n, r) {
var i = {};
i[n] = true;
var s = this.getItem(e, t, i, r);
var o = s[0][0].join(" ") + " " + s[1][0] + " " + s[2][0].join(" ");
return o;
};
this.getUniqItems = function() {
return Object.keys(this.indices).sort(function(e, t) {
var n = e.toLocaleLowerCase();
var r = t.toLocaleLowerCase();
if (n < r) return -1;
if (n > r) return 1;
return 0;
}).filter(function(e) {
return e !== f;
});
};
this.getUniqItemsWithCounts = function() {
var e = [];
for (p in this.indices) {
e.push(p + "	" + this.indices[p].length);
}
e.sort(function(e, t) {
var n = e.toLocaleLowerCase();
var r = t.toLocaleLowerCase();
if (n < r) return -1;
if (n > r) return 1;
return 0;
});
return e;
};
this.fromJSON = function(e) {
this.baseField = e.baseField;
this.baseFieldIdx = e.baseFieldIdx;
this.items = e.items;
this.itemObjs = e.itemObjs;
this.indices = e.indices;
this.numTypes = e.numTypes;
this.numTokens = e.numTokens;
this.useRecords = e.useRecords;
};
this.itemToIndex = function(e) {
return v(e);
};
};
})();