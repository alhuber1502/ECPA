/* (This is the new BSD license.)
* Copyright (c) 2012-2014, Chris Culy
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Chris Culy nor the 
*		names of its contributors may be used to endorse or promote 
*		products from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Chris Culy
* ``AS IS'' AND ANY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
* ARE DISCLAIMED. IN NO EVENT SHALL Chris Culy
* BE LIABLE FOR ANY, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
* CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
* GOODS OR SERVICES; OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
* TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/"use strict";

var textmodel = textmodel || {};

(function() {
textmodel.TextHash = function(e, t, n, r, i, s, o) {
function d(e) {
var s = e.split(r);
var o = s[u.baseFieldIdx];
if (!t) {
o = o.toLocaleLowerCase();
}
for (var a = 0, f = s.length; a < f; a++) {
if (a == u.baseFieldIdx) {
continue;
}
if (i.indexOf(n[a]) > -1) {
o += "" + r + s[a];
}
}
return o;
}
function v(e) {
var t = e.split(r);
var i = {};
t.forEach(function(e, t) {
i[n[t]] = e;
});
return i;
}
var u = this;
var a = String.fromCharCode(30);
this.useRecords = o && true;
this.baseField = s;
this.baseFieldIdx = n.indexOf(s);
if (this.baseFieldIdx == -1) {
this.baseFieldIdx = 0;
}
if (this.useRecords) {
e = e.replace(/\s*\n\n+/g, " " + a + " ");
}
this.items = e.replace(/\s*\n\s*/g, " ").trim().split(" ");
this.itemObjs = [];
this.indices = {};
this.numTypes = 0;
this.numTokens = this.items.length;
var f = this.items.length;
var l = f - 1;
if (e != "") {
for (var c = 0; c < f; c++) {
var h = d(this.items[c]);
this.itemObjs[c] = v(h);
if (!(h in this.indices && this.indices[h] instanceof Array)) {
this.indices[h] = [];
}
try {
this.indices[h].push(c);
} catch (p) {
console.log("Couldn't add: " + h);
}
}
}
this.numTypes = Object.keys(this.indices).length;
this.containsItem = function(e) {
return d(e) in this.indices;
};
this.containsIndex = function(e) {
return e in this.indices;
};
this.getItem = function(e, t, r, i, s, o, f) {
var l = [], c = [], h = [], p = [];
if (u.useRecords) {
var d = n[0];
if (s == null) {
s = {};
}
if (typeof s["leftEnd"] === "undefined") {
s["leftEnd"] = {};
}
var v = s["leftEnd"][d];
if (typeof s["leftEnd"][d] === "undefined") {
s["leftEnd"][d] = [];
}
s["leftEnd"][d].push(a);
if (typeof s["rtEnd"] === "undefined") {
s["rtEnd"] = {};
}
if (typeof s["rtEnd"][d] === "undefined") {
s["rtEnd"][d] = [];
}
s["rtEnd"][d].push(a);
}
var m = function(e) {
if (!f) {
return function() {
return true;
};
}
var t = new RegExp("^[" + f + "]$");
return function(n, r, i) {
return !t.test(u.itemObjs[r + e][u.baseField]);
};
};
var g = function(e) {
return function() {
return true;
};
};
var y = function(e) {
return e;
};
var b = function(e) {
return e;
};
if (s) {
if (s["include"]) {
var w = s["include"];
var g = function(e) {
return function(t, n, r) {
for (var i in w) {
if (w[i].indexOf(u.itemObjs[n + e][i]) > -1) {
return true;
}
}
return false;
};
};
} else if (s["exclude"]) {
var E = s["exclude"];
g = function(e) {
return function(t, n, r) {
for (var i in E) {
if (E[i].indexOf(u.itemObjs[n + e][i]) > -1) {
return false;
}
}
return true;
};
};
}
if (s["leftEnd"]) {
y = function(e, t) {
var n = 0;
var r = true;
for (var i = e.length - 1; i > -1; i--) {
for (var o in s["leftEnd"]) {
if (s["leftEnd"][o].indexOf(u.itemObjs[i + t][o]) > -1) {
r = false;
}
}
if (!r) {
n = i + 1;
break;
}
}
return e.slice(n, e.length + 1);
};
}
if (s["rtEnd"]) {
b = function(e, t) {
var n = true;
return e.filter(function(e, r) {
if (!n) {
return false;
}
for (var i in s["rtEnd"]) {
if (s["rtEnd"][i].indexOf(u.itemObjs[r + t][i]) > -1) {
n = false;
break;
}
}
return n;
});
};
}
}
var S = this.items.length;
var x = S - 1;
var T;
if (i) {
var N = this;
var C = new RegExp(e, "i");
var k = Object.keys(this.indices).filter(function(e) {
return C.test(e);
}).map(function(e) {
return N.indices[e];
});
T = [];
k.forEach(function(e) {
e.forEach(function(e) {
T.push(e);
});
});
N = null;
} else {
T = this.indices[e];
}
var L = T.length;
var A = L - 1;
for (var O = 0; O < L; O++) {
if (r != null && !(O in r)) {
continue;
}
p.push(O);
var M = T[O];
var _ = this.items[M];
c.push(_);
if (M == 0) {
l.push([]);
} else {
var D = Math.max(0, M - t);
var P = y(this.items.slice(D, M), D);
D += t - P.length;
l.push(P.filter(function(e, t, n) {
return m(D)(e, t, n) && g(D)(e, t, n);
}));
}
if (M == x) {
h.push([]);
} else {
var H = Math.min(x, M + t);
var B = M + 1;
var j = b(this.items.slice(B, H + 1), B);
h.push(j.filter(function(e, t, n) {
return m(B)(e, t, n) && g(B)(e, t, n);
}));
}
}
if (o !== null && o > 0) {
var F = d3.shuffle(d3.range(0, c.length)).slice(0, o);
l = d3.permute(l, F);
c = d3.permute(c, F);
h = d3.permute(h, F);
p = d3.permute(p, F);
}
return [ l, c, h, p ];
};
this.getItems = function(e, t, n, r, i, s) {
return this.getItem(e, t, n, true, r, i, s);
};
this.getItemContext = function(e, t, n, r) {
var i = {};
i[n] = true;
var s = this.getItem(e, t, i, r);
var o = s[0][0].join(" ") + " " + s[1][0] + " " + s[2][0].join(" ");
return o;
};
this.getUniqItems = function() {
return Object.keys(this.indices).sort(function(e, t) {
var n = e.toLocaleLowerCase();
var r = t.toLocaleLowerCase();
if (n < r) return -1;
if (n > r) return 1;
return 0;
}).filter(function(e) {
return e !== a;
});
};
this.getUniqItemsWithCounts = function() {
var e = [];
for (h in this.indices) {
e.push(h + "	" + this.indices[h].length);
}
e.sort(function(e, t) {
var n = e.toLocaleLowerCase();
var r = t.toLocaleLowerCase();
if (n < r) return -1;
if (n > r) return 1;
return 0;
});
return e;
};
this.fromJSON = function(e) {
this.baseField = e.baseField;
this.baseFieldIdx = e.baseFieldIdx;
this.items = e.items;
this.indices = e.indices;
this.numTypes = e.numTypes;
this.numTokens = e.numTokens;
this.useRecords = e.useRecords;
};
this.itemToIndex = function(e) {
return d(e);
};
};
})();