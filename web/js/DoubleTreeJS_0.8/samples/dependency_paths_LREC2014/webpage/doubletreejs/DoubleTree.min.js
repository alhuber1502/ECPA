/* (This is the new BSD license.)
* Copyright (c) 2012-2014, Chris Culy
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Chris Culy nor the 
*		names of its contributors may be used to endorse or promote 
*		products from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Chris Culy
* ``AS IS'' AND ANY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
* ARE DISCLAIMED. IN NO EVENT SHALL Chris Culy
* BE LIABLE FOR ANY, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
* CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
* GOODS OR SERVICES; OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
* TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/"use strict";

var doubletree = {};

(function() {
function e(t, n) {
if (!t.children) {
return;
}
var r = t.children.length;
for (var s = 0; s < r; s++) {
var o = t.children[s];
if (i(o.info.ids, n)) {
t.children[s] = null;
} else {
e(o, n);
}
}
t.children = t.children.filter(function(e) {
return e != null;
});
var u = d3.max(t.children.map(function(e) {
return e.maxChildren;
}));
t.maxChildren = Math.max(t.children.length, u);
}
function t(e, n, r) {
if (!e.children) {
return;
}
if (r) {
if (!e.info.origIDs) {
e.info.origIDs = {};
s(e.info.origIDs, e.info.ids);
e.info.origCount = Object.keys(e.info.origIDs).length;
} else {
e.info.ids = {};
s(e.info.ids, e.info.origIDs);
e.info.count = Object.keys(e.info.ids).length;
}
}
var o = Object.keys(n);
for (var u = 0, a = o.length; u < a; u++) {
var f = o[u];
delete e.info.ids[f];
}
e.info.count = Object.keys(e.info.ids).length;
var a = e.children.length;
for (var u = 0; u < a; u++) {
var l = e.children[u];
if (i(l.info.ids, n)) {
e.children[u] = null;
} else {
t(l, n, false);
}
}
e.children = e.children.filter(function(e) {
return e != null;
});
e.info.continuations = e.children.length;
var c = d3.max(e.children.map(function(e) {
return e.maxChildren;
}));
e.maxChildren = Math.max(e.children.length, c);
}
function n(e) {
if (e.info.origCount) {
e.info.ids = {};
s(e.info.ids, e.info.origIDs);
e.info.count = e.info.origCount;
var t = e.children.length;
e.info.continuations = t;
for (var r = 0; r < t; r++) {
var i = e.children[r];
n(i);
}
}
}
function r(e, t) {
for (var n in e) {
if (n in t) {
return true;
}
}
return false;
}
function i(e, t) {
if (!e || !t) {
return false;
}
for (var n in e) {
if (!(n in t)) {
return false;
}
}
return true;
}
function s(e, t) {
for (var n in t) {
e[n] = t[n];
}
}
function o() {}
doubletree.DoubleTree = function() {
function k(t) {
t.each(function(t, n) {
e.push(this[n]);
});
}
var e = [];
var n = 600;
var r;
var i = {
left: [],
right: []
};
var u = {
alt: o,
shift: o
};
var a = true;
var f = true;
var l = doubletree.sortByStrFld("token");
var c = doubletree.tokenText;
var h = function(e) {
return doubletree.fieldText(e, "POS");
};
var p = function(e) {
return "rgba(255,255,255,0)";
};
var d = function(e) {
return "rgba(255,255,255,0)";
};
var v = function(e) {
return "red";
};
var m = {
node: {
fill: "white",
stroke: "steelblue",
"stroke-width": "1.5px"
},
branch: {
stroke: "#aaa",
"stroke-width": "1.5px"
}
};
var g = false;
var y = d3.dispatch("idsUpdated");
y.on("idsUpdated", function() {
if (this == E) {
S.setIds(E.continuationIDs);
S.updateContinuations();
} else if (this == S) {
E.setIds(S.continuationIDs);
E.updateContinuations();
}
});
var b, w, E, S;
var x = 14;
var T = 1.15 * x;
var N = 8;
var C;
k.init = function(e) {
d3.select(d3.selectAll(e)).call(this);
return k;
};
k.redraw = function() {
k.setupFromTries(b, w);
return k;
};
k.setupFromTries = function(o, L) {
b = o.getUniqRoot();
w = L.getUniqRoot();
var A = b.toTree(i.left);
var O = w.toTree(i.right);
var M = true;
if (Object.keys(O.pruned).length > 0) {
t(O, O.pruned, M);
t(A, O.pruned, M);
M = false;
}
if (Object.keys(A.pruned).length > 0) {
t(A, A.pruned, M);
t(O, A.pruned, M);
}
var _ = {};
for (var D in O.info) {
if (D != "continuations" && D != "ids" && D != "count") {
_[D] = O.info[D];
}
}
_["right continuations"] = O.info.continuations;
_["left continuations"] = A.info.continuations;
_.ids = {};
s(_.ids, O.info.ids);
s(_.ids, A.info.ids);
_.count = Object.keys(_.ids).length;
if (O.info.origIDs || A.info.origIDs) {
_.origIDs = {};
s(_.origIDs, O.info.origIDs);
s(_.origIDs, A.info.origIDs);
_.origCount = Object.keys(_.origIDs).length;
}
O.info = _;
A.info = _;
var P = Math.max(A.maxChildren, O.maxChildren);
if (isNaN(P) || P == 0) {
g = false;
return k;
}
if (f) {
C = d3.scale.log().range([ N, x ]);
} else {
C = function() {
return x;
};
C.domain = function() {};
}
r = Math.max(200, P * (T - 2));
var H = Math.max(A.maxLen, O.maxLen);
var B = Math.max(80, H * .6 * T);
if (B > 200) {
B = 200;
}
var j = Math.min(A.minCount, O.minCount);
C.domain([ j, A.info.count ]);
var F = {
top: 20,
right: 20,
bottom: 20,
left: 20
}, I = n - F.right - F.left, q = r - F.top - F.bottom;
e[0].forEach(function(e, t) {
var i = e;
var s;
var o = d3.select(i).select("svg");
if (o[0][0] == null) {
s = d3.select(i).append("svg").attr("width", I + F.right + F.left).attr("height", q + F.top + F.bottom).attr("cursor", "move").call(d3.behavior.zoom().on("zoom", function() {
if (d3.event.sourceEvent.type !== "mousemove") {
return;
}
s.attr("transform", "translate(" + d3.event.translate + ")");
}));
s.append("g");
} else {
s = o;
s.attr("width", I + F.right + F.left).attr("height", q + F.top + F.bottom);
s.selectAll("g *").remove();
}
E = new doubletree.Tree(s.select("g"), n, r, B, A, true, l, y, C, a, c, h, p, d, v, m);
S = new doubletree.Tree(s.select("g"), n, r, B, O, false, l, y, C, a, c, h, p, d, v, m);
});
E.handleAltPress = u.alt;
S.handleAltPress = u.alt;
E.handleShiftPress = u.shift;
S.handleShiftPress = u.shift;
g = true;
return k;
};
k.setupFromArrays = function(e, t, n, r, i, s, o) {
if (undefined == r && b) {
r = b.caseSensitive();
}
if (undefined == i && b) {
i = b.fieldNames();
}
if (undefined == s && b) {
s = b.fieldDelim();
}
if (undefined == o && b) {
o = b.distinguishingFieldsArray();
}
b = new doubletree.Trie(r, i, s, o);
w = new doubletree.Trie(r, i, s, o);
var u = t.length;
for (var a = 0; a < u; a++) {
var f = t[a];
var l = e[a].slice();
l.push(f);
l.reverse();
b.addNgram(l, a);
var c = n[a].slice();
c.unshift(f);
w.addNgram(c, a);
}
k.setupFromTries(b, w);
return k;
};
k.search = function(t) {
E.search(t);
S.search(t);
var n = d3.select(e[0][0]);
var r = n.selectAll("text.foundText");
if (r.empty()) {
return 0;
}
var i = r[0].length;
var s = n.selectAll("text.rtNdText.foundText");
if (s[0][0] != null) {
i--;
}
return i;
};
k.clearSearch = function() {
E.clearSearch();
S.clearSearch();
return k;
};
k.updateTokenExtras = function() {
E.showTokenExtras(a);
S.showTokenExtras(a);
var t = d3.select(e[0][0]);
var n = t.select('.tokenExtra[display="inline"]');
if (!n.empty()) {
var r = n.style("height");
if (r == "0px") {
k.redraw();
}
}
return k;
};
k.visWidth = function(e) {
if (!arguments.length) return n;
n = e;
return k;
};
k.filters = function(e) {
if (!arguments.length) return i;
i = e;
return k;
};
k.handlers = function(e) {
if (!arguments.length) return u;
u = e;
return k;
};
k.showTokenExtra = function(e) {
if (!arguments.length) return a;
a = e;
return k;
};
k.scaleLabels = function(e) {
if (!arguments.length) return f;
f = e;
return k;
};
k.succeeded = function() {
return g;
};
k.sortFun = function(e) {
if (!arguments.length) return l;
l = e;
return k;
};
k.nodeText = function(e) {
if (!arguments.length) return c;
c = e;
return k;
};
k.tokenExtraText = function(e) {
if (!arguments.length) return h;
h = e;
return k;
};
k.rectColor = function(e) {
if (!arguments.length) return p;
p = e;
return k;
};
k.rectBorderColor = function(e) {
if (!arguments.length) return d;
d = e;
return k;
};
k.continuationColor = function(e) {
if (!arguments.length) return v;
v = e;
return k;
};
k.basicStyles = function(e) {
if (!arguments.length) return m;
Object.keys(m).forEach(function(t) {
if (t in e) {
Object.keys(m[t]).forEach(function(n) {
if (n in e[t]) {
m[t][n] = e[t][n];
}
});
}
});
return k;
};
return k;
};
doubletree.Tree = function(e, t, n, s, o, u, a, f, l, c, h, p, d, v, m, g) {
function j(e) {
if (e.children) {
e._children = e.children;
e._children.forEach(j);
e.children = null;
}
}
function F(e) {
if (e.parent) {
e.parent.children.forEach(function(t) {
if (t != e) {
j(t);
}
});
}
}
function q(e, t) {
if (d3.event.altKey) {
I.handleAltPress(e, t);
return;
}
if (d3.event.shiftKey) {
I.handleShiftPress(e, t);
return;
}
if (!e.parent) {
return;
}
if (I.continuationIDs != e.info.ids) {
I.setIds(e.info.ids);
I.clickedNode = e.id;
f.idsUpdated.apply(I);
}
F(e);
R(e, true);
}
function R(e, t) {
if (e.children) {
e._children = e.children;
e.children = null;
} else {
e.children = e._children;
e._children = null;
if (e.children && e.children.length == 1) {
R(e.children[0], false);
}
}
if (t) {
I.update(e);
}
}
function U(e) {
return u ? A / 2 - e : A / 2 + e;
}
function z(e) {
return e - P;
}
var y = s;
var b = false || c;
var w = {};
var E;
var S = h;
var x = p;
var T = d;
var N = v;
var C = m;
var k = g;
var L = {
top: 20,
right: 20,
bottom: 20,
left: 20
}, A = t - L.right - L.left, O = n - L.top - L.bottom, M = 0, _ = 200, D;
var P;
if (!a) {
a = doubletree.sortByStrFld("token");
}
var H = d3.layout.tree().size([ O, A ]).sort(a);
var B = d3.svg.diagonal().projection(function(e) {
return [ U(e.y), z(e.x) ];
});
e = e.append("g").attr("transform", "translate(" + L.left + "," + L.top + ")");
this.readJSONTree = function(e) {
D = e;
D.x0 = O / 2;
D.y0 = A / 2;
D.children.forEach(j);
this.update(D);
};
var I = this;
this.update = function(t) {
if (!t) {
t = D;
}
var n = H.nodes(D).reverse();
P = D.x - O / 2;
n.forEach(function(e) {
e.y = e.depth * y;
});
var r = e.selectAll("g.node_" + u).data(n, function(e) {
return e.id || (e.id = ++M);
});
var s = r.enter().append("g").attr("class", "node node_" + u).attr("transform", function(e) {
return "translate(" + U(t.y0) + "," + z(t.x0) + ")";
}).on("click", q);
s.append("title").text(function(e) {
var t = doubletree.infoToText(e.info);
return t;
});
s.append("circle").attr("r", 1e-6).style("fill", function(e) {
return e._children ? "#fff" : k.node.fill;
}).style("stroke", function(e) {
return k.node.stroke;
});
var o = s.append("text").attr("class", function(e) {
if (e.depth == 0) {
return "rtNdText";
} else {
return "";
}
}).attr("x", function(e) {
if (e.children || e._children) {
return 0;
} else {
return u ? 10 : -10;
}
}).attr("text-anchor", function(e) {
if (!e.parent) {
return "middle";
}
if (e.children || e._children) {
return u ? "end" : "start";
} else {
return u ? "start" : "end";
}
}).style("font-size", function(e) {
return l(e.info.count) + "pt";
});
o.append("tspan").attr("dy", ".35em").attr("class", "tokenText").text(function(e) {
return S(e.info, e.depth < 1);
}).style("fill-opacity", 1e-6);
o.append("tspan").attr("dx", ".35em").attr("class", "tokenExtra").text(function(e) {
return x(e.info, e.depth < 1);
}).style("fill-opacity", 1e-6);
this.drawRects = function() {
var t = b ? "inline" : "none";
e.selectAll(".tokenExtra").attr("display", t);
r.selectAll("rect").remove();
var n = r.append("rect").attr("class", "nodeRect").attr("height", function() {
return this.parentElement.getBBox().height - 6;
}).attr("y", function(e) {
if (!e.parent) {
return -.5 * this.parentElement.getBBox().height / 2 - 2;
} else {
return -.5 * this.parentElement.getBBox().height / 2;
}
}).attr("width", function() {
return this.parentElement.getBBox().width;
}).attr("x", function(e) {
var t = this.parentElement.getBBox().width;
if (!e.parent) {
return -.33333 * t;
}
if (!u) {
return 0;
}
return -.5 * t;
}).style("stroke-opacity", 1).style("stroke-width", 1).style("stroke", function(e) {
return N(e.info);
}).style("fill", function(e) {
return T(e.info);
}).style("fill-opacity", function(e) {
if (!e.parent && !u) {
return 1e-6;
} else {
return 1;
}
});
};
try {
this.drawRects();
} catch (a) {}
var f = r.transition().duration(_).attr("transform", function(e) {
return "translate(" + U(e.y) + "," + z(e.x) + ")";
});
f.select("circle").attr("r", function(e) {
return e.children || e._children ? 1e-6 : 4.5;
}).style("fill", function(e) {
return e._children ? "#fff" : k.node.fill;
}).style("stroke-width", k.node["stroke-width"]);
f.select("text").attr("class", function(e) {
var t = i(I.continuationIDs, e.info.ids);
if (t || !e.parent) {
classListAdd(this, "continuation");
} else {
classListRemove(this, "continuation");
}
return classListToString(this);
}).style("fill-opacity", 1).style("fill", function(e) {
if (classListContains(this, "continuation")) {
return C(e.info);
}
return "#444";
});
f.selectAll("tspan").style("fill-opacity", 1);
var c = r.exit().transition().duration(_).attr("transform", function(e) {
return "translate(" + U(t.y) + "," + z(t.x) + ")";
}).remove();
c.select("circle").attr("r", 1e-6);
c.selectAll("tspan").style("fill-opacity", 1e-6);
var h = e.selectAll("path.link_" + u).data(H.links(n), function(e) {
return e.target.id;
});
h.enter().insert("path", "g").attr("class", "link link_" + u).attr("d", function(e) {
var n = {
x: t.x0,
y: t.y0
};
return B({
source: n,
target: n
});
}).style("fill", "none").style("stroke", k.branch.stroke).style("stroke-width", k.branch["stroke-width"]);
h.transition().duration(_).attr("d", B);
h.exit().transition().duration(_).attr("d", function(e) {
var n = {
x: t.x,
y: t.y
};
return B({
source: n,
target: n
});
}).remove();
n.forEach(function(e) {
e.x0 = e.x;
e.y0 = e.y;
});
};
this.setIds = function(e) {
I.continuationIDs = e;
};
this.updateContinuations = function() {
e.selectAll("g.node_" + u + " text").classed("continuation", function(e) {
var t = r(e.info.ids, I.continuationIDs);
if (t) {
classListAdd(this, "continuation");
} else {
classListRemove(this, "continuation");
}
return t;
}).style("fill", function(e) {
if (classListContains(this, "continuation")) {
return C(e.info);
}
return "#444";
});
};
this.search = function(t) {
e.selectAll("g.node text").attr("class", function(e) {
var n = t.test(S(e.info));
if (n) {
classListAdd(this, "foundText");
} else {
classListRemove(this, "foundText");
}
return classListToString(this);
});
};
this.clearSearch = function() {
e.selectAll("g.node text").attr("class", function(e) {
classListRemove(this, "foundText");
return classListToString(this);
});
};
this.showTokenExtras = function(e) {
if (arguments.length == 0) {
return b;
}
b = e;
this.drawRects();
return this;
};
this.setRectColor = function(e) {
if (arguments.length == 0) {
return T;
}
T = e;
this.drawRects();
return this;
};
this.handleAltPress = function() {};
this.handleShifttPress = function() {};
this.readJSONTree(o);
return this;
};
doubletree.sortByStrFld = function(e) {
var t = e;
return function(e, n) {
var r = undefined == e.info[t];
var i = undefined == n.info[t];
if (r && i) {
return 0;
} else if (r) {
return -1;
} else if (i) {
return 1;
}
var s = e.info[t].join(" ").toLowerCase();
var o = n.info[t].join(" ").toLowerCase();
if (s < o) {
return -1;
} else if (s > o) {
return 1;
}
return 0;
};
};
doubletree.sortByCount = function() {
return function(e, t) {
return t.info.count - e.info.count;
};
};
doubletree.sortByContinuations = function() {
return function(e, t) {
return t.info.continuations - e.info.continuations;
};
};
doubletree.filterByMinCount = function(e) {
return function(t) {
return t.count >= e;
};
};
doubletree.filterByMaxCount = function(e) {
return function(t) {
return t.count <= e;
};
};
doubletree.filterByPOS = function(e) {
var t = new RegExp(e);
return function(e) {
return e["POS"] && e["POS"].filter(function(e) {
return e.search(t) > -1;
}).length > 0;
};
};
doubletree.fieldText = function(e, t) {
return e[t];
};
doubletree.tokenText = function(e) {
return doubletree.fieldText(e, "token");
};
doubletree.infoToText = function(e) {
var t = "";
for (var n in e) {
if (n == "ids" || n == "origIDs") {
t += n + "	:	" + Object.keys(e[n]).join(",") + "\n";
} else {
t += n + "	:	" + e[n] + "\n";
}
}
return t;
};
})();