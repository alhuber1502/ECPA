
TODO:

Basic insight:
- interface is really quite simple as everything I do will create *one* or *more* triples,
  so basic starting point could be to define everything in terms of S-P-O, e.g.

  I want to talk about the author "Thomas Gray" becomes:
  <http://www.eighteenthcenturypoetry.org/authors/pers00039.shtml> a crm:P21_Person .
  <http://www.eighteenthcenturypoetry.org/authors/pers00039.shtml> crm:P2_has_type lcr:aut .
  <http://www.eighteenthcenturypoetry.org/authors/pers00039.shtml> owl:sameAs wd:Q315516 .

  There are explicit and implicit triples that need to be attached to certain shortcuts
  automatically, e.g. author gets a role for person type.  But only if the type field is
  filled in/selected would the triple be created.

  There will also be implicit entities that make certain types of information possible, e.g.
  we need a Production event associated with a book to give it a publication date, etc.
  These implicit entities should be considered as "dependent" on the modelled entitiy, e.g.
  they should receive a UUID with /production or /expression or /birth etc. attached to make
  it possible to create/delete them as a unit and attach things like dates to them

- idea would be to create a *set* of *one* or *more* S-P-O based on the input/selection and
  then create a form based on it that requests *needed* information and will do other things
  (e.g. query WD when user inputs an identifier and then switches input field).  It will store
  implicit triples as hidden form values, e.g. using the values.xxx mechanism to reference and
  combine fields (see below)

This will be the simplest option.  The next is to choose one of the predefined fundamental
concepts/relationships paths.  For this approach I need to construct a possibly quite
complicated form from the path expressions in my fundamentals.json 

- How do I associate a single triple that may involve creation of two entities with input
  fields for each one and a relationship?  How do I encode the various dependencies and
  options into an actionable output (form).  Is the generator approach taken by 3M the way to
  go?
  --> It seems like a good idea to adopt the abstraction layer provided by a form generation
  tool like https://github.com/jsonform/jsonform that is Bootstrap3-friendly, provides flexible
  processing, control over the result of the inputs, and client-side validation

- on submit the form data is translated into a triple stream (may be useful when inserting a
  whole form with values, instead of adding triples individually):

  var body = `@prefix : <http://www.eighteenthcenturypoetry.org/resources/models/#> .
              :a :b :c .
	      :d :e :f .`;
  try {
      $rdf.parse(body, localizedKB, localizedKBURI, 'text/turtle');
  } catch (err) {
      console.log(err);
  }

  after each submit the created entities need to be updated, labels need to be indexed to become
  available as datalists for selection, filtering of entities by class, etc.
  -> how do I keep the model in memeory?  do I need to?  I think all I will need is an index of
  instances with types, i.e. a list of IDs, and probably labels to populate datalists in forms,
  the rest should be in onto (class hierarchies, properties hierarchies), if really necessary
  I could temporarily request an instance or select group from the triplestore.


Form tips:
- labels above input forms
- use hints for special input instructions DD/MM/YYYY between label and input field
- use placeholder only as additional visual cues
- structure information by triples
- indicate required fields at labels with red asterisk (almost all will be required)
- use input field types where sensible (dates, e-mail, etc.)
- style submit button in colour, cancel button grey
- use meaningful submit text, e.g. "Add to model" instead of "Submit"
- don't use a reset button ever
- do immediate client-side input validation


I want to talk about:
- an author
- a poem
- a book
- a manuscript
- a ...

I want to express a relation between:
- thing - thing > a.
  	  	  b.
		  c. -> c.1
		     	c.2
			c.3 -> path 1
			       path 2
			       path 3

-> I need an actionable format that can unambiguously represent a path and make it
translatable into a form, i.e it will need indications of required and optional parts of
each of the parts: good thing is with the jsonform abstraction layer, I can custom-build
every single path into a bespoke version that can account for optional, repeatable, etc.
parts.  I need a clever way of translating the paths into the JSON schema format (may be
worth testing with a few examples, rather than committing to a format which I then
struggle with getting into what I need/want)
...

I want to use the full expressivity:
-> use onto to guide users re. properties and hierarchies
